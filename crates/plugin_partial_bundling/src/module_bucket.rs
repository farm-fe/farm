use std::{hash::Hash, mem::replace};

use farmfe_core::{
  config::PartialBundlingModuleBucketsConfig, hashbrown::HashSet, module::ModuleId,
};

use crate::ResourceUnitId;

/// A ModuleBucket is a collection of modules in the same ModuleGroup.
/// By default, a ModuleBucket is generated by following rule:
/// The modules which are in the same ModuleGroups are in the same ModuleBucket. For example, if there are two ModuleGroups A and B. if module c is in ModuleGroup A and ModuleGroup B, module d is only in ModuleGroup A, then c and d are in the different ModuleBucket.
///
/// A ModuleBucket can generate multiple ResourcePots.
#[derive(Debug)]
pub struct ModuleBucket {
  pub id: ModuleBucketId,
  pub customized_by_user: bool,
  modules: HashSet<ModuleId>,
  pub config: PartialBundlingModuleBucketsConfig,
  pub resource_units: HashSet<ResourceUnitId>,
}

impl ModuleBucket {
  pub fn new(
    id: ModuleBucketId,
    modules: HashSet<ModuleId>,
    customized_by_user: bool,
    config: PartialBundlingModuleBucketsConfig,
  ) -> Self {
    Self {
      id,
      customized_by_user,
      modules,
      config,
      resource_units: HashSet::new(),
    }
  }

  pub fn modules(&self) -> &HashSet<ModuleId> {
    &self.modules
  }

  pub fn resource_units(&self) -> &HashSet<ResourceUnitId> {
    &self.resource_units
  }

  pub fn add_module(&mut self, module_id: ModuleId) {
    self.modules.insert(module_id);
  }

  pub fn replace_modules(&mut self, modules: HashSet<ModuleId>) {
    self.modules = modules;
  }

  pub fn take_modules(&mut self) -> HashSet<ModuleId> {
    replace(&mut self.modules, HashSet::new())
  }

  pub fn add_resource_pot(&mut self, resource_pot_id: ResourceUnitId) {
    self.resource_units.insert(resource_pot_id);
  }

  pub fn remove_module(&mut self, module_id: &ModuleId) -> bool {
    self.modules.remove(module_id)
  }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ModuleBucketId {
  id: String,
}

impl From<String> for ModuleBucketId {
  fn from(id: String) -> Self {
    Self { id }
  }
}

impl ToString for ModuleBucketId {
  fn to_string(&self) -> String {
    self.id.clone()
  }
}
